import {
	Body,
	Controller,
	Headers,
	HttpCode,
	HttpStatus,
	Post,
	RawBody,
	UnauthorizedException,
	Req
} from '@nestjs/common'
import { Request } from 'express';
import { WebhookService } from './webhook.service'

@Controller('webhook')
export class WebhookController {
	public constructor(private readonly webhookService: WebhookService) {}

	@Post('livekit')
	@HttpCode(HttpStatus.OK)
	public async receiveWebhookLivekit(
		@RawBody() rawBody: Buffer,  // –ó–∞–º–µ–Ω–∏–ª–∏ @Body() –Ω–∞ @RawBody()
		@Headers('Authorization') authorization: string
	) {
		if (!authorization) {
		  throw new UnauthorizedException('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
		}

		const bodyString = rawBody.toString(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Buffer –≤ —Å—Ç—Ä–æ–∫—É
		return await this.webhookService.receiveWebhookLivekit(bodyString, authorization);
	}

	@Post('stripe')
	@HttpCode(HttpStatus.OK)
	async receiveWebhookStripe(
	  @Headers('stripe-signature') signature: string,
	  @Req() req: Request, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å
	) {
	  if (!signature) {
		throw new UnauthorizedException('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å Stripe');
	  }

	  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º Buffer –≤ —Å—Ç—Ä–æ–∫—É
	  const rawBody = req.body instanceof Buffer ? req.body.toString('utf8') : req.body;

	  console.log('üü¢ VK Tunnel Raw Body:', rawBody);
	  console.log('üü¢ Type:', typeof rawBody);
	  console.log('üü¢ Length:', rawBody ? rawBody.length : 'undefined');

	  const event = this.webhookService.constructStripeEvent(rawBody, signature);
	  await this.webhookService.receiveWebhookStripe(event);
	}
}
